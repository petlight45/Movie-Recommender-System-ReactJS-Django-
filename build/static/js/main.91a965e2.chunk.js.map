{"version":3,"sources":["NavBar.js","RecommendedMovies.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","handleQuerySubmit","handleAlertQuery","className","href","onSubmit","type","name","placeholder","aria-label","onClick","e","for","id","RecommendedMovies","queryMeta","queriedMovieName","queriedMovieCat","toBeRenderedData","nothingText","label_type","key","imdbID","src","Poster","alt","Title","Year","Type","Rated","Runtime","Genre","replace","imdbRating","Plot","target","map","SN","Footer","props","App","useState","recMoviesIMDBID","setRecMoviesIMDBID","maxPerView","currentView","setCurrentView","toBeRenderedIMDBID","setTobeRenderedIMDBID","setQueriedMovieName","setQueriedMovieCat","matchedMovieIMDBID","setMatchedMovieIMDBID","setQueryMeta","setToBeRenderedData","API_HOST","API_KEY","API_ENDPOINT","showSpinner","setShowSpinner","showViewMore","setShowViewMore","alertQuery","setAlertQuery","setNothingText","queryText","setQueryText","useEffect","length","slice","console","log","getData","a","counter","response_","id_","x","findIndex","fetch","response","json","response_data","Response","push","filter","data","preventDefault","movie_tag","elements","movieName","value","movie_type","movieCat","query_api_link","axios","get","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91a965e2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst NavBar = ({handleQuerySubmit,handleAlertQuery})=>{\r\n    return (\r\n        <nav className=\"navbar theme-bg flex-column flex-md-row align-items-stretch align-items-md-center py-3\">\r\n            <a className=\"navbar-brand d-flex align-items-center justify-content-center text-white mt-0 pt-0\" href=\"#\">\r\n                <i className=\"fas fa-film main-logo\"></i>\r\n                <span className='mx-3 main-text'>Movie Recommender</span>\r\n            </a>\r\n            <div className=\"justify-content-center justify-content-md-end d-flex flex-grow\">\r\n            <form className=\"form-inline justify-self-end movie-input-form d-flex flex-column flex-grow align-items-stretch\" onSubmit={handleQuerySubmit}>\r\n                <div className=\"d-flex\">\r\n                    <input className=\"form-control flex-grow mr-sm-2 mx-0 movie-input py-md-3 py-2\" type=\"search\" name=\"movieName\" placeholder=\"Enter a Movie or TV-Show name; \" aria-label=\"Search\" />\r\n                    <a onClick={(e)=>handleAlertQuery(e)}><i className=\"fas ml-2 info-search fa-info-circle text-white\"></i></a>\r\n                </div>\r\n                <div className='flex-grow d-flex flex-row justify-content-between px-2 align-items-center mt-1'>\r\n                    <div className=\"cat-select-wrapper d-flex flex-row flex-grow mt-1 px-1 px-sm-3\">\r\n                        <label for=\"movie-cat\" className=\"text-white text-small mr-2 \">Category</label>\r\n                        <select className=\"form-control\" id=\"queryCategory\" name=\"movieCat\">\r\n                        <option>Hollywood</option>\r\n                        <option>Bollywood</option>\r\n                        <option>Nollywood</option>\r\n                        <option>British Movies</option>\r\n                        <option>Chinese Movies</option>\r\n                        <option>Korean Movies</option>\r\n                        <option>Thai Movies</option>\r\n                        <option>TV-Show</option>\r\n                        <option>Korean Drama</option>\r\n                        </select>\r\n                    </div>\r\n                    <button className=\"btn btn-outline-danger btn-search my-2 my-sm-0 px-4 py-1\" type=\"submit\">Search</button>\r\n                </div>\r\n                \r\n            </form>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst RecommendedMovies = ({queryMeta,queriedMovieName,queriedMovieCat,toBeRenderedData, nothingText})=>{\r\n    const imdb_endpoint = \"https://www.imdb.com/title/\"\r\n    const label_type = {\r\n        \"movie\":\"Movie\",\r\n        \"series\":\"TV-Show\",\r\n        \"episode\":\"Episode\"\r\n    }\r\n    \r\n    return (queryMeta)?\r\n        <div className='container py-3'>\r\n            <div className=\"query w-100\">\r\n                <h6 className=\"px-3\">Query Terms: {queriedMovieName}, {queriedMovieCat}</h6>\r\n                <h6 className=\"px-3\">Matched Movie; </h6>\r\n                <div className=\"px-0\">\r\n                    <div className=\"media movie-body flex-column flex-md-row position-relative px-3 py-3 align-items-stretch\" key={queryMeta.imdbID}>\r\n                        <img src={queryMeta.Poster} className=\"mr-3 image-item\" alt=\"No Image Available\" />\r\n                        <div className=\"media-body d-flex flex-column mt-2 mt-md-1\">\r\n                            <div className=\"d-flex flex-column\">\r\n                                <h5 className=\"my-0 name-item\">{queryMeta.Title} ({queryMeta.Year})</h5>\r\n                                <span className=\"align-self-start extra-det-item px-0 mt-1\"><span className=\"font-weight-bold text-danger\">{label_type[queryMeta.Type]}</span> | <span className=\"font-weight-bold text-primary\">{queryMeta.Rated}</span> | <span className=\"font-weight-bold text-success\">{queryMeta.Runtime}</span> | {queryMeta.Genre.replace(/,/g, \" |\")}</span>\r\n                                <span className=\"extra-det-item\"><i className=\"fas fa-star rating-item my-1 text-warning mr-2\"></i>{queryMeta.imdbRating}</span>\r\n                            </div>\r\n                            <span className=\"plot-item mb-3\">{queryMeta.Plot}</span>\r\n                            <a target=\"_blank\" href={`${imdb_endpoint}${queryMeta.imdbID}/`} className=\"btn theme-bg-accent text-white read-more-btn btn-outline-danger px-3 align-self-end mr-3 mt-auto\">Read More</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"recommended mt-5 w-100\">\r\n                <h4 className=\"px-3\">Recommended Movies; </h4>\r\n                <div className=\"px-0\">\r\n                    {toBeRenderedData.map((queryMeta)=>{\r\n                        return(\r\n                            <div className=\"media movie-body align-items-stretch flex-column flex-md-row position-relative px-3 py-3\" key={queryMeta.imdbID}>\r\n                                <img src={queryMeta.Poster} className=\"mr-3 image-item\" alt=\"No Image Available\" />\r\n                                <div className=\"media-body d-flex flex-column mt-2 mt-md-1\">\r\n                                    <div className=\"d-flex flex-column\">\r\n                                        <h5 className=\"my-0 name-item\">{queryMeta.SN}. {queryMeta.Title} ({queryMeta.Year})</h5>\r\n                                        <span className=\"align-self-start extra-det-item px-0 mt-1\"><span className=\"font-weight-bold text-danger\">{label_type[queryMeta.Type]}</span> | <span className=\"font-weight-bold text-primary\">{queryMeta.Rated}</span> | <span className=\"font-weight-bold text-success\">{queryMeta.Runtime}</span> | {queryMeta.Genre.replace(/,/g, \" |\")}</span>\r\n                                        <span className=\"extra-det-item\"><i className=\"fas fa-star rating-item my-1 text-warning mr-2\"></i>{queryMeta.imdbRating}</span>\r\n                                    </div>\r\n                                    <span className=\"plot-item mb-3\">{queryMeta.Plot}</span>\r\n                                    <a target=\"_blank\" href={`${imdb_endpoint}${queryMeta.imdbID}/`} className=\"btn theme-bg-accent text-white read-more-btn btn-outline-danger px-3 align-self-end mr-3 mt-auto\">Read More</a>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>:\r\n            <h3 className=\"text-center py-5\">\r\n                {nothingText}\r\n            </h3>\r\n        ;\r\n}\r\n\r\nexport default RecommendedMovies;","import React from 'react';\r\n\r\n\r\nconst Footer = (props)=>{\r\n    return (\r\n        <div className=\"footer mt-3 text-center py-3\">\r\n            <ul className=\"d-flex justify-content-center social-icons-wrapper px-0 py-1 my-0\">\r\n                <li className=\"icon-item\"><a href=\"https://twitter.com/FPeterlight\"><i className=\"fab fa-twitter twitter-icon\"></i></a></li>\r\n                <li className=\"icon-item ml-3\"><a href=\"https://www.instagram.com/faboyedepeterlight/\"><i className=\"fab fa-instagram instagram-icon\"></i></a></li>\r\n                <li className=\"icon-item ml-3\"><a href=\"https://api.whatsapp.com/send?phone=2349060990102\"><i className=\"fab fa-whatsapp whatsapp-icon\"></i></a></li>\r\n            </ul>\r\n            <div className='footer-content mb-4'><span><i className=\"fas fa-phone-alt icon-item text-primary mr-2\"></i>09060990102</span></div>\r\n            <div className=\"footer-content px-3\">Copyright &#169; 2020 - Movie Recommender System | <span className=\"text-danger\">Peterlight Tech.</span></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport NavBar from './NavBar';\r\nimport RecommendedMovies from './RecommendedMovies';\r\nimport Footer from './Footer';\r\nimport {useState,useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst App = ()=>{\r\n\tconst [recMoviesIMDBID, setRecMoviesIMDBID] = useState([]);\r\n\tconst [maxPerView, setMaxPerView] = useState(5);\r\n\tconst [currentView, setCurrentView] = useState(0);\r\n\tconst [toBeRenderedIMDBID, setTobeRenderedIMDBID] = useState([])\r\n\tconst [queriedMovieName, setQueriedMovieName] = useState(\"\")\r\n\tconst [queriedMovieCat, setQueriedMovieCat] = useState(\"\")\r\n\tconst [matchedMovieIMDBID, setMatchedMovieIMDBID] = useState(\"\")\r\n\tconst [queryMeta, setQueryMeta] = useState(null)\r\n\tconst [toBeRenderedData, setToBeRenderedData] = useState([])\r\n\tconst API_HOST = \"movie-database-imdb-alternative.p.rapidapi.com\"\r\n    const API_KEY = \"ce15ebaf8dmshfb3801d1cfa22dcp1f4c05jsn1dad2b361974\"\r\n    const API_ENDPOINT = \"https://movie-database-imdb-alternative.p.rapidapi.com/?r=json&plot=full&i=\"\r\n    const [showSpinner, setShowSpinner] = useState(false);\r\n    const [showViewMore, setShowViewMore] = useState(false);\r\n    const [alertQuery, setAlertQuery] = useState(false);\r\n    const [nothingText, setNothingText] = useState('Nothing to Display')\r\n    const [queryText, setQueryText] = useState('')\r\n\r\n\r\n\r\n\tuseEffect(()=>{\r\n\t\tsetCurrentView(1);\r\n\t}, [recMoviesIMDBID])\r\n\r\n\tuseEffect(()=>{\r\n\t\tif ((currentView*maxPerView) >= recMoviesIMDBID.length){\r\n\t\t\tsetTobeRenderedIMDBID(recMoviesIMDBID)\r\n\t\t}else{\r\n\t\t\tsetTobeRenderedIMDBID(recMoviesIMDBID.slice(0, currentView*maxPerView))\r\n\t\t}\r\n\t}, [currentView])\r\n\r\n\r\n\tuseEffect(()=>{\r\n\t\tconsole.log(toBeRenderedIMDBID)\r\n\t\tsetShowViewMore(false)\r\n\t\tlet getData = async ()=>{\r\n\t\t\tlet counter = toBeRenderedData.length + 1;\r\n\t\t\tlet response_ = [];\r\n\t\t\tfor (let id_ of toBeRenderedIMDBID){\r\n\t\t\t\tif ((toBeRenderedData.map((x)=>x.imdbID).findIndex((x)=>x===id_)) !== -1){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\ttry{\r\n\t\t\t\t\tlet response = await fetch(`${API_ENDPOINT}${id_}`, {\r\n\t\t\t\t\t                        \"method\": \"GET\",\r\n\t\t\t\t\t                        \"headers\": {\r\n\t\t\t\t\t                            \"x-rapidapi-host\": `${API_HOST}`,\r\n\t\t\t\t\t                            \"x-rapidapi-key\": `${API_KEY}`\r\n\t\t\t\t\t                        }\r\n\t\t\t\t                      })\r\n\t\t\t\t\tlet response_data = await response.json()\r\n\t\t            if (response_data.Response === \"True\"){\r\n\t\t            \tresponse_data.SN = counter ++\r\n\t\t            \tresponse_.push(response_data)\r\n\t\t            }\r\n\t\t        }catch{\r\n\t\t            response_.push(null);\r\n\t\t        }\r\n\t        }\r\n\t     \tsetShowSpinner(false)   \r\n\t      \tsetToBeRenderedData([...toBeRenderedData,...response_.filter((data)=>data)])\r\n\t\t}\r\n\t\tif (toBeRenderedIMDBID.length){\r\n\t\t\tgetData()\r\n\t\t}else{\r\n\t\t\tsetToBeRenderedData([])\r\n\t\t}\r\n\t},[toBeRenderedIMDBID])\r\n\r\n\r\n\tuseEffect(()=>{\r\n\t\tif ((toBeRenderedData.length && queryMeta) && (toBeRenderedIMDBID.length < recMoviesIMDBID.length)){\r\n\t      \t\tsetShowViewMore(true)\r\n\t      \t}else{\r\n\t      \t\tsetShowViewMore(false)\r\n\t      \t}\r\n\t},[toBeRenderedData])\r\n\r\n\tuseEffect(()=>{\r\n\t\tlet getData = async ()=>{\r\n\t\t\ttry{\r\n\t            let response = await fetch(`${API_ENDPOINT}${matchedMovieIMDBID}`, {\r\n\t\t                        \"method\": \"GET\",\r\n\t\t                        \"headers\": {\r\n\t\t                            \"x-rapidapi-host\": `${API_HOST}`,\r\n\t\t                            \"x-rapidapi-key\": `${API_KEY}`\r\n\t\t                        }\r\n\t                             })\r\n\t            let response_data = await response.json()\r\n\t            if (response_data.Response === \"True\"){\r\n\t            \tsetQueryMeta(response_data)\r\n\t            }\r\n\t        }catch{\r\n\t            setQueryMeta(null)\r\n\t        }\r\n\r\n\t\t}\r\n\t\tif (matchedMovieIMDBID){\r\n\t\t\tgetData()\r\n\t\t}else{\r\n\t\t\tsetQueryMeta(null)\r\n\t\t}\r\n\t},[matchedMovieIMDBID])\r\n\r\n\tconst handleViewMoreClick = (e)=>{\r\n\t\te.preventDefault();\r\n\t\tsetShowSpinner(true)\r\n\t\tsetCurrentView(currentView+1)\r\n\t}\r\n\r\n\tconst handleAlertQuery = (e)=>{\r\n\t\tconsole.log('s')\r\n\t\te.preventDefault()\r\n\t\tsetQueryText(\"You can also search for movies and tv-shows by making use of tags like 'main casts', 'plots', 'major actors', 'year of production' and of course the 'title'.examples are; 'jungle dwayne johnson','thanos','elijah klaus mikaelson','black panther','jason statham heart failure','dominic toretto','wakanda vibranium'\")\r\n\t\tsetAlertQuery(!alertQuery)\r\n\t}\r\n\r\n\tconst handleQuerySubmit = async (e)=>{\r\n\t\te.preventDefault();\r\n\t\tconst movie_tag = e.target.elements.movieName.value\r\n\t\tconst movie_type = e.target.elements.movieCat.value\r\n\t\tif (!movie_tag){\r\n\t\t\tsetQueryText('Enter a search term; ')\r\n\t\t\tsetAlertQuery(true)\r\n\t\t\treturn\r\n\t\t}\r\n\t\tsetNothingText('')\r\n\t\tsetRecMoviesIMDBID([])\r\n\t\tsetAlertQuery(false)\r\n\t\tsetCurrentView(-1)\r\n\t\tsetMatchedMovieIMDBID(\"\")\r\n\t\t// const proxy_link = 'https://peaceful-taiga-43479.herokuapp.com/'\r\n\t\tconst query_api_link = `get_recommendations/?movie_type=${movie_type.replace(/\\s/g, '%20')}&movie_tag=${movie_tag.replace(/\\s/g, '%20')}`\r\n\t\t\r\n\t\ttry{\r\n\t\t\tsetShowSpinner(true)\r\n\t\t\tconst data = (await axios.get(query_api_link)).data\r\n\t\t\tsetQueriedMovieName(movie_tag)\r\n\t\t\tsetQueriedMovieCat(movie_type)\r\n\t\t\tconsole.log(data['recommended_ids'])\r\n\t\t\tsetMatchedMovieIMDBID(data['matched_id'])\r\n\t\t\tsetCurrentView(-1)\r\n\t\t\tsetRecMoviesIMDBID(data['recommended_ids'])\r\n\t\t}catch{\r\n\t\t\tsetNothingText('Internal Server Error Try Again')\r\n\t\t\tsetShowSpinner(false)\r\n\t\t}\r\n\t\tconsole.log(movie_tag,movie_type)\r\n\t}\r\n\r\n\r\n    return(\r\n        <div className='app-content'>\r\n        \t<div className=\"content\">\r\n            <NavBar handleQuerySubmit={handleQuerySubmit} handleAlertQuery={handleAlertQuery}/>\r\n            {(alertQuery)?\r\n            <div className=\"alert alert-danger\" role=\"alert\">{queryText}</div>:\r\n            null\r\n\t\t\t}\r\n            <RecommendedMovies className=\"mb-4\" queryMeta={queryMeta} queriedMovieName={queriedMovieName} queriedMovieCat={queriedMovieCat} toBeRenderedData={toBeRenderedData} nothingText={nothingText} />\r\n            {(showSpinner)?\r\n            <div className=\"text-center py-2 mt-3\"><span className=\"spinner d-inline-block\"></span></div>\r\n            :null}\r\n            {(showViewMore)?\r\n            \t<div className='d-flex justify-content-center py-1 mb-4'><a className=\"\" id=\"btn-view-more\" onClick={handleViewMoreClick}>View More</a></div>:\r\n            \tnull}\r\n             </div>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}